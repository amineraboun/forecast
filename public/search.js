window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"forecast_combine": {"fullname": "forecast_combine", "modulename": "forecast_combine", "kind": "module", "doc": "<p></p>\n"}, "forecast_combine.forecast": {"fullname": "forecast_combine.forecast", "modulename": "forecast_combine.forecast", "kind": "module", "doc": "<p>Timeseries Forecasting with Insample, Validation and Out-of-Sample predictions</p>\n"}, "forecast_combine.forecast.CommonForecastingModels": {"fullname": "forecast_combine.forecast.CommonForecastingModels", "modulename": "forecast_combine.forecast", "qualname": "CommonForecastingModels", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;Naive&#x27;: NaiveForecaster(), &#x27;Seasonal_Naive&#x27;: NaiveForecaster(sp=5), &#x27;AutoARIMA&#x27;: StatsForecastAutoARIMA(), &#x27;AutoETS&#x27;: StatsForecastAutoETS(), &#x27;AutoCES&#x27;: StatsForecastAutoCES(), &#x27;AutoTheta&#x27;: StatsForecastAutoTheta(), &#x27;AutoTBATS&#x27;: StatsForecastAutoTBATS(seasonal_periods=1), &#x27;Prophet&#x27;: Prophet()}"}, "forecast_combine.forecast.Forecast": {"fullname": "forecast_combine.forecast.Forecast", "modulename": "forecast_combine.forecast", "qualname": "Forecast", "kind": "class", "doc": "<p>Forecast class for managing and evaluating forecast models.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>data (pd.DataFrame): A DataFrame containing the input data for forecasting.</li>\n<li>depvar_str (str): The column name representing the dependent variable for forecasting.</li>\n<li>fh (int): The forecast horizon, i.e., the number of periods ahead to forecast.</li>\n<li>pct_initial_window (float): The percentage of data used as the initial training window.</li>\n<li>step_length (int): The step size for expanding window cross-validation.</li>\n<li>forecaster_name (str, optional): The name of the forecasting model. Default is 'Naive'.</li>\n<li>forecaster (object, optional): The forecasting model object. Default is None, which will use the model corresponding to forecaster_name.</li>\n<li>exog_l (list, optional): List of exogenous variables for forecasting. Default is None.</li>\n<li>freq (str, optional): The frequency of the time series data. Default is 'B' (business days).</li>\n</ul>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<ul>\n<li>depvar (str): The column name representing the dependent variable for forecasting.</li>\n<li>exog_l (list): List of exogenous variables for forecasting.</li>\n<li>freq (str): The frequency of the time series data.</li>\n<li>forecaster_name (str): The name of the forecasting model.</li>\n<li>forecaster (object): The forecasting model object.</li>\n<li>_y (pd.Series): The dependent variable for forecasting.</li>\n<li>_X (pd.DataFrame): The exogenous variables for forecasting.</li>\n<li>_fh (ForecastingHorizon): The forecast horizon.</li>\n<li>_initial_window (int): The initial training window size.</li>\n<li>_step_length (int): The step size for expanding window cross-validation.</li>\n<li>_cv (ExpandingWindowSplitter): The cross-validation window.</li>\n<li>_X_train (pd.DataFrame): The training set of exogenous variables.</li>\n<li>_X_test (pd.DataFrame): The test set of exogenous variables.</li>\n<li>_y_train (pd.Series): The training set of the dependent variable.</li>\n<li>_y_test (pd.Series): The test set of the dependent variable.</li>\n<li>is_fitted (bool): A flag indicating if the model is fitted.</li>\n<li>_fitted (ForecastFit): An instance of the ForecastFit class containing the fitted model and insample performance metrics.</li>\n<li>is_evaluated (bool): A flag indicating if the model is evaluated.</li>\n<li>_eval (ForecastEval): An instance of the ForecastEval class containing the out-of-sample evaluation results.</li>\n<li>plot (ForecastPlot): An instance of the ForecastPlot class for plotting utility.</li>\n</ul>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>split_procedure_summary(verbose: bool=True) -> dict: Generate a summary of the cross-validation procedure.</li>\n<li>fit(on: str='all', fh: Optional[ForecastingHorizon]=None) -> ForecastFit: Fit the forecaster and compute insample results.</li>\n<li>evaluate() -> ForecastEval: Evaluate the forecaster out-of-sample.</li>\n<li>predict(X: Optional[pd.DataFrame]=None, fh: Optional[ForecastingHorizon]=None, coverage: float=0.9, verbose=False) -> Tuple[pd.DataFrame, pd.DataFrame]: Generate predictions using the fitted model.</li>\n<li>update(new_y: pd.Series, new_X: Optional[pd.DataFrame]=None, fh: Optional[ForecastingHorizon]=None, coverage: float=0.9, refit: bool=False) -> Tuple[pd.DataFrame, pd.DataFrame]: Update cutoff value to forecast new dates.</li>\n<li>get_pred_errors() -> pd.DataFrame: Get the prediction errors.</li>\n</ul>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<ul>\n<li>AssertionError: If the provided data is not a DataFrame, or if depvar_str is not a valid column in the data, or if exog_l is not None or an iterable.</li>\n<li>AssertionError: If any column in exog_l is not present in the data.</li>\n<li>AssertionError: If freq is not a recognized pandas frequency.</li>\n</ul>\n"}, "forecast_combine.forecast.Forecast.__init__": {"fullname": "forecast_combine.forecast.Forecast.__init__", "modulename": "forecast_combine.forecast", "qualname": "Forecast.__init__", "kind": "function", "doc": "<p>Initializes the Forecast class with the provided parameters.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">depvar_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fh</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">pct_initial_window</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">step_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">forecaster_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Naive&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">forecaster</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exog_l</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">freq</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;D&#39;</span></span>)</span>"}, "forecast_combine.forecast.Forecast.forecaster_name": {"fullname": "forecast_combine.forecast.Forecast.forecaster_name", "modulename": "forecast_combine.forecast", "qualname": "Forecast.forecaster_name", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.Forecast.is_fitted": {"fullname": "forecast_combine.forecast.Forecast.is_fitted", "modulename": "forecast_combine.forecast", "qualname": "Forecast.is_fitted", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.Forecast.is_evaluated": {"fullname": "forecast_combine.forecast.Forecast.is_evaluated", "modulename": "forecast_combine.forecast", "qualname": "Forecast.is_evaluated", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.Forecast.plot": {"fullname": "forecast_combine.forecast.Forecast.plot", "modulename": "forecast_combine.forecast", "qualname": "Forecast.plot", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"fullname": "forecast_combine.forecast.Forecast.split_procedure_summary", "modulename": "forecast_combine.forecast", "qualname": "Forecast.split_procedure_summary", "kind": "function", "doc": "<p>Generate a summary of the cross-validation procedure.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>verbose : bool, optional\n    If True, print the summary. Default is True.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>dict\n    A dictionary containing the summary of the cross-validation procedure.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "forecast_combine.forecast.Forecast.fit": {"fullname": "forecast_combine.forecast.Forecast.fit", "modulename": "forecast_combine.forecast", "qualname": "Forecast.fit", "kind": "function", "doc": "<p>Fit the forecaster and compute insample results.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>on : str, optional\n    Either 'train' or 'all'. Sample on which the model is fitted. By default, it is fitted on the entire sample.\nfh : ForecastingHorizon, optional\n    Forecast horizon.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>ForecastFit:\n    An instance of the ForecastFit class containing the fitted model and insample performance metrics.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">on</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fh</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sktime</span><span class=\"o\">.</span><span class=\"n\">forecasting</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">_fh</span><span class=\"o\">.</span><span class=\"n\">ForecastingHorizon</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.Forecast.evaluate": {"fullname": "forecast_combine.forecast.Forecast.evaluate", "modulename": "forecast_combine.forecast", "qualname": "Forecast.evaluate", "kind": "function", "doc": "<p>Evaluate the forecaster out-of-sample.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>ForecastEval:\n    An instance of the ForecastEval class containing the out-of-sample evaluation results.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.Forecast.predict": {"fullname": "forecast_combine.forecast.Forecast.predict", "modulename": "forecast_combine.forecast", "qualname": "Forecast.predict", "kind": "function", "doc": "<p>Generate predictions (Average and confidence interval) using the fitted model.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>X : pd.DataFrame, optional\n    Exogenous variables for forecasting. Default is None\nfh : ForecastingHorizon, optional\n    Forecast horizon. Default is None and takes the horizon defined at instantiation.\ncoverage : float, optional\n    The coverage of the confidence interval. Default is 0.9.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>Tuple[pd.DataFrame, pd.DataFrame]:\n    A tuple containing the predictions and the confidence intervals.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fh</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sktime</span><span class=\"o\">.</span><span class=\"n\">forecasting</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">_fh</span><span class=\"o\">.</span><span class=\"n\">ForecastingHorizon</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coverage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "forecast_combine.forecast.Forecast.update": {"fullname": "forecast_combine.forecast.Forecast.update", "modulename": "forecast_combine.forecast", "qualname": "Forecast.update", "kind": "function", "doc": "<p>Update cutoff value to forecast new dates.\nPossibility to refit the model.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>new_y : pd.Series\n    The new dependent variable values.\nnew_X : pd.DataFrame, optional\n    The new exogenous variables. Default is None.\nfh : ForecastingHorizon, optional\n    Forecast horizon. Default is None and takes the horizon defined at instantiation.\ncoverage : float, optional\n    The coverage of the confidence interval. Default is 0.9.\nrefit : bool, optional\n    If True, refit the model. Default is False.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>Tuple[pd.DataFrame, pd.DataFrame]:\n    A tuple containing the updated predictions and the updated confidence intervals.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_y</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">new_X</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fh</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sktime</span><span class=\"o\">.</span><span class=\"n\">forecasting</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">_fh</span><span class=\"o\">.</span><span class=\"n\">ForecastingHorizon</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coverage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">refit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "forecast_combine.forecast.Forecast.get_pred_errors": {"fullname": "forecast_combine.forecast.Forecast.get_pred_errors", "modulename": "forecast_combine.forecast", "qualname": "Forecast.get_pred_errors", "kind": "function", "doc": "<p>Get the prediction errors.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>pd.DataFrame:\n    A DataFrame containing the prediction errors.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastPlot": {"fullname": "forecast_combine.forecast.ForecastPlot", "modulename": "forecast_combine.forecast", "qualname": "ForecastPlot", "kind": "class", "doc": "<p>Plotting utility class for Forecast.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>LF (Forecast): An instance of the Forecast class</li>\n</ul>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>plot_train_test(labels: List[str] = None, xlabel: Optional[str] = None, ylabel: Optional[str] = None, title: str = 'Train-Test sets', ax: Optional[plt.Axes] = None, figsize: Tuple[float, float] = (15, 6)) -> Tuple[plt.Figure, np.array]: Plot the dependent variable separating the train from the test windows.</li>\n<li>plot_cv_procedure(ax: Optional[plt.Axes] = None, labels: List[str] = None, ylabel: str = \"Window number\", xlabel: str = \"Time\", title: str = \"Cross Validation Procedure\") -> Tuple[plt.Figure, np.array]: Plot the cross-validation procedure.</li>\n<li>plot_prediction(y_pred: pd.Series, y_pred_ints: Optional[pd.DataFrame] = None, interval_label: str = 'CI', labels: List[str] = None, xlabel: Optional[str] = None, ylabel: Optional[str] = None, title: str = 'Prediction', ax: Optional[plt.Axes] = None, figsize: Tuple[float, float] = (15, 6)) -> Tuple[plt.Figure, np.array]: Plot the forecast predictions and the confidence intervals.</li>\n<li>plot_prediction_true(y_pred: pd.Series, y_pred_ints: Optional[pd.DataFrame] = None, interval_label: str = 'CI', labels: List[str] = None, xlabel: Optional[str] = None, ylabel: Optional[str] = None, title: str = 'Prediction', ax: Optional[plt.Axes] = None, figsize: Tuple[float, float] = (15, 6)) -> Tuple[plt.Figure, np.array]: Plot the forecast predictions, true values, and the confidence intervals.</li>\n</ul>\n"}, "forecast_combine.forecast.ForecastPlot.__init__": {"fullname": "forecast_combine.forecast.ForecastPlot.__init__", "modulename": "forecast_combine.forecast", "qualname": "ForecastPlot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">LF</span><span class=\"p\">:</span> <span class=\"n\">forecast_combine</span><span class=\"o\">.</span><span class=\"n\">forecast</span><span class=\"o\">.</span><span class=\"n\">Forecast</span></span>)</span>"}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"fullname": "forecast_combine.forecast.ForecastPlot.plot_train_test", "modulename": "forecast_combine.forecast", "qualname": "ForecastPlot.plot_train_test", "kind": "function", "doc": "<p>Plot the dependent variable separating the train from the test windows.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>labels : List[str], optional\n    Labels for the plot. Default is [\"y_train\", \"y_test\"].\nxlabel : str, optional\n    Label for the x-axis.\nylabel : str, optional\n    Label for the y-axis.\ntitle : str, optional\n    The title of the plot. Default is 'Train-Test sets'.\nax : plt.Axes, optional\n    The Axes object for the plot.\nfigsize : Tuple[float, float], optional\n    The figure size. Default is (15, 6).\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    The Figure object containing the plot.\naxes : np.array\n    An array of Axes objects containing the plot.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Train-Test sets&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"fullname": "forecast_combine.forecast.ForecastPlot.plot_cv_procedure", "modulename": "forecast_combine.forecast", "qualname": "ForecastPlot.plot_cv_procedure", "kind": "function", "doc": "<p>Plot the cross-validation procedure.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>ax : plt.Axes, optional\n    The Axes object for the plot.\nlabels : List[str], optional\n    Labels for the plot. Default is [\"Window\", \"Forecasting horizon\"].\nylabel : str, optional\n    Label for the y-axis. Default is \"Window number\".\nxlabel : str, optional\n    Label for the x-axis. Default is \"Time\".\ntitle : str, optional\n    The title of the plot. Default is \"Cross Validation Procedure\".\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    The Figure object containing the plot.\naxes : np.array\n    An array of Axes objects containing the plot.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Window number&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Time&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Cross Validation Procedure&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"fullname": "forecast_combine.forecast.ForecastPlot.plot_prediction", "modulename": "forecast_combine.forecast", "qualname": "ForecastPlot.plot_prediction", "kind": "function", "doc": "<p>Plot the forecast predictions and the confidence intervals.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>y_pred : pd.Series\n    The predicted values.\ny_pred_ints : pd.DataFrame, optional\n    The DataFrame containing the prediction intervals.\ninterval_label : str, optional\n    Label for the prediction interval. Default is 'prediction interval'.\nlabels : List[str], optional\n    Labels for the plot. Default is [\"y_train\", \"y_pred\"].\nxlabel : str, optional\n    Label for the x-axis.\nylabel : str, optional\n    Label for the y-axis.\ntitle : str, optional\n    The title of the plot. Default is 'Prediction'.\nax : plt.Axes, optional\n    The Axes object for the plot.\nfigsize : Tuple[float, float], optional\n    The figure size. Default is (15, 6).\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    The Figure object containing the plot.\naxes : np.array\n    An array of Axes objects containing the plot.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred_ints</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interval_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CI&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Prediction&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"fullname": "forecast_combine.forecast.ForecastPlot.plot_prediction_true", "modulename": "forecast_combine.forecast", "qualname": "ForecastPlot.plot_prediction_true", "kind": "function", "doc": "<p>Plot the forecast predictions, true values, and the confidence intervals.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>y_pred : pd.Series\n    The predicted values.\ny_pred_ints : pd.DataFrame, optional\n    The DataFrame containing the prediction intervals.\ninterval_label : str, optional\n    Label for the prediction interval. Default is 'prediction interval'.\nlabels : List[str], optional\n    Labels for the plot. Default is [\"y_train\", \"y_true\", \"y_pred\"].\nxlabel : str, optional\n    Label for the x-axis.\nylabel : str, optional\n    Label for the y-axis.\ntitle : str, optional\n    The title of the plot. Default is 'Prediction'.\nax : plt.Axes, optional\n    The Axes object for the plot.\nfigsize : Tuple[float, float], optional\n    The figure size. Default is (15, 6).\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    The Figure object containing the plot.\naxes : np.array\n    An array of Axes objects containing the plot.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred_ints</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interval_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CI&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Prediction&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.compute_predictions": {"fullname": "forecast_combine.forecast.compute_predictions", "modulename": "forecast_combine.forecast", "qualname": "compute_predictions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastFit": {"fullname": "forecast_combine.forecast.ForecastFit", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit", "kind": "class", "doc": "<p>Class for fitting the forecaster and computing insample predictions.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>Forecast (Forecast): An instance of the Forecast class.</li>\n</ul>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<ul>\n<li>forecaster (object): The forecasting model object.</li>\n<li>forecaster_name (str): The name of the forecasting model.</li>\n<li>is_fitted (bool): A flag indicating if the model is fitted.</li>\n<li>_y_train (pd.Series): The training set of the dependent variable.</li>\n<li>_y (pd.Series): The dependent variable for forecasting.</li>\n<li>_X (pd.DataFrame): The exogenous variables for forecasting.</li>\n<li>_fh (ForecastingHorizon): The forecast horizon.</li>\n<li>_cv (ExpandingWindowSplitter): The cross-validation window.</li>\n<li>plot (ForecastFitPlot): An instance of the ForecastFitPlot class for plotting utility.</li>\n<li>insample_result_df (pd.DataFrame): A DataFrame containing the insample predictions.</li>\n<li>insample_perf_summary (dict): A dictionary containing the computed insample performance metrics.</li>\n</ul>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>insample_predictions(random_sample: bool=False, nsample: int=100, verbose: bool=False) -> pd.DataFrame: Compute the insample predictions for the fitted model.</li>\n<li>insample_perf() -> dict: Compute insample performance metrics (RMSE and MAPE) for the fitted model.</li>\n</ul>\n"}, "forecast_combine.forecast.ForecastFit.__init__": {"fullname": "forecast_combine.forecast.ForecastFit.__init__", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">LF</span><span class=\"p\">:</span> <span class=\"n\">forecast_combine</span><span class=\"o\">.</span><span class=\"n\">forecast</span><span class=\"o\">.</span><span class=\"n\">Forecast</span></span>)</span>"}, "forecast_combine.forecast.ForecastFit.forecaster": {"fullname": "forecast_combine.forecast.ForecastFit.forecaster", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.forecaster", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"fullname": "forecast_combine.forecast.ForecastFit.forecaster_name", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.forecaster_name", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastFit.is_fitted": {"fullname": "forecast_combine.forecast.ForecastFit.is_fitted", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.is_fitted", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastFit.plot": {"fullname": "forecast_combine.forecast.ForecastFit.plot", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.plot", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastFit.insample_result_df": {"fullname": "forecast_combine.forecast.ForecastFit.insample_result_df", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.insample_result_df", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"fullname": "forecast_combine.forecast.ForecastFit.insample_perf_summary", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.insample_perf_summary", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"fullname": "forecast_combine.forecast.ForecastFit.insample_predictions", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.insample_predictions", "kind": "function", "doc": "<p>Compute the insample predictions for the fitted model.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>nsample : int, optional\n    The number of samples to compute. Default is 100.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>pd.DataFrame\n    A DataFrame containing the insample predictions.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">random_sample</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">nsample</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastFit.insample_perf": {"fullname": "forecast_combine.forecast.ForecastFit.insample_perf", "modulename": "forecast_combine.forecast", "qualname": "ForecastFit.insample_perf", "kind": "function", "doc": "<p>Compute insample performance metrics (RMSE and MAPE) for the fitted model.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>dict\n    A dictionary containing the computed insample performance metrics.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastFitPlot": {"fullname": "forecast_combine.forecast.ForecastFitPlot", "modulename": "forecast_combine.forecast", "qualname": "ForecastFitPlot", "kind": "class", "doc": "<p>Plotting utility class for ForecastFit.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>LFF (ForecastFit): An instance of the ForecastFit class.</li>\n</ul>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>plot_insample_performance(metric: str = 'RMSE', title: str = 'Insample Performance') -> Tuple[plt.Figure, np.array]: Plot the insample performance metrics.</li>\n</ul>\n"}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"fullname": "forecast_combine.forecast.ForecastFitPlot.__init__", "modulename": "forecast_combine.forecast", "qualname": "ForecastFitPlot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">LFF</span><span class=\"p\">:</span> <span class=\"n\">forecast_combine</span><span class=\"o\">.</span><span class=\"n\">forecast</span><span class=\"o\">.</span><span class=\"n\">ForecastFit</span></span>)</span>"}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"fullname": "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance", "modulename": "forecast_combine.forecast", "qualname": "ForecastFitPlot.plot_insample_performance", "kind": "function", "doc": "<p>Plot the insample performance metrics.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>metric : str, optional\n    The performance metric to plot. Default is 'RMSE'.\ntitle : str, optional\n    The title of the plot. Default is 'Insample Performance'.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    The Figure object containing the plot.\naxes : np.array\n    An array of Axes objects containing the plot.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;RMSE&#39;</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Insample Performance&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastEval": {"fullname": "forecast_combine.forecast.ForecastEval", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval", "kind": "class", "doc": "<p>Class for evaluating the forecaster out-of-sample.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>Forecast (Forecast): An instance of the Forecast class.</li>\n</ul>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<ul>\n<li>forecaster (object): The forecasting model object.</li>\n<li>forecaster_name (str): The name of the forecasting model.</li>\n<li>oos_eval (pd.DataFrame): A DataFrame containing the out-of-sample evaluation results.</li>\n<li>plot (ForecastEvalPlot): An instance of the ForecastEvalPlot class for plotting utility.</li>\n<li>_y (pd.Series): The dependent variable for forecasting.</li>\n<li>_X (pd.DataFrame): The exogenous variables for forecasting.</li>\n<li>_cv (ExpandingWindowSplitter): The cross-validation window.</li>\n<li>_scoring_metrics (list): A list of scoring metrics.    </li>\n<li>_oos_horizon_df (pd.DataFrame): A DataFrame containing the out-of-sample predictions and errors per horizon.</li>\n<li>_oos_horizon_perf (pd.DataFrame): A DataFrame containing the summary performance metrics per horizon.</li>\n<li>_oos_cutoff_perf (pd.DataFrame): A DataFrame containing the summary performance metrics per cutoff.</li>\n</ul>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>summary_results() -> pd.DataFrame: Generate a summary of out-of-sample forecast results.</li>\n<li>summary_cutoff() -> pd.DataFrame: Generate a summary of out-of-sample performance per cutoff.</li>\n<li>summary_horizon() -> pd.DataFrame: Generate a summary of out-of-sample performance per horizon.</li>\n</ul>\n"}, "forecast_combine.forecast.ForecastEval.__init__": {"fullname": "forecast_combine.forecast.ForecastEval.__init__", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">LF</span><span class=\"p\">:</span> <span class=\"n\">forecast_combine</span><span class=\"o\">.</span><span class=\"n\">forecast</span><span class=\"o\">.</span><span class=\"n\">Forecast</span></span>)</span>"}, "forecast_combine.forecast.ForecastEval.forecaster": {"fullname": "forecast_combine.forecast.ForecastEval.forecaster", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval.forecaster", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"fullname": "forecast_combine.forecast.ForecastEval.forecaster_name", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval.forecaster_name", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastEval.oos_eval": {"fullname": "forecast_combine.forecast.ForecastEval.oos_eval", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval.oos_eval", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastEval.plot": {"fullname": "forecast_combine.forecast.ForecastEval.plot", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval.plot", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.forecast.ForecastEval.summary_results": {"fullname": "forecast_combine.forecast.ForecastEval.summary_results", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval.summary_results", "kind": "function", "doc": "<p>Generate a summary of out-of-sample forecast results.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>pd.DataFrame\n    A DataFrame containing various summary statistics of the out-of-sample forecasts.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"fullname": "forecast_combine.forecast.ForecastEval.summary_cutoff", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval.summary_cutoff", "kind": "function", "doc": "<p>Generate a summary of out-of-sample performance per cutoff.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>pd.DataFrame\n    A DataFrame containing summary performance metrics (RMSE and MAPE) for each horizon.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"fullname": "forecast_combine.forecast.ForecastEval.summary_horizon", "modulename": "forecast_combine.forecast", "qualname": "ForecastEval.summary_horizon", "kind": "function", "doc": "<p>Generate a summary of out-of-sample performance per horizon.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>pd.DataFrame\n    A DataFrame containing summary performance metrics (RMSE and MAPE) for each horizon.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.forecast.ForecastEvalPlot": {"fullname": "forecast_combine.forecast.ForecastEvalPlot", "modulename": "forecast_combine.forecast", "qualname": "ForecastEvalPlot", "kind": "class", "doc": "<p>Plotting utility class for ForecastEval.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>LFE (ForecastEval): An instance of the ForecastEval class.</p>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<p>_oos_horizon_perf (pd.DataFrame): A DataFrame containing the summary performance metrics per horizon.\n_oos_cutoff_perf (pd.DataFrame): A DataFrame containing the summary performance metrics per cutoff.</p>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<p>plot_oos_score(score: str = 'RMSE', view: str = 'horizon', xlabel: str = None, ylabel: str = None, title: str = 'Out of Sample Performance', ax: Optional[plt.Axes] = None, figsize: Tuple[float, float] = (15, 6)) -> Tuple[plt.Figure, np.array]: Plot out-of-sample performance metric historically.</p>\n"}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"fullname": "forecast_combine.forecast.ForecastEvalPlot.__init__", "modulename": "forecast_combine.forecast", "qualname": "ForecastEvalPlot.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">LFE</span><span class=\"p\">:</span> <span class=\"n\">forecast_combine</span><span class=\"o\">.</span><span class=\"n\">forecast</span><span class=\"o\">.</span><span class=\"n\">ForecastEval</span></span>)</span>"}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"fullname": "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score", "modulename": "forecast_combine.forecast", "qualname": "ForecastEvalPlot.plot_oos_score", "kind": "function", "doc": "<p>Plot out-of-sample performance metric historically.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>score : str, optional\n    The performance metric to plot. Default is 'RMSE'.\nview: str, optional\n    The view of the plot. It must be either \n        - horizon: the function plots the average score per forecast horizon\n        - cutoff: the function plots the average across all horizons for each cutoff                \n    Default is 'horizon'.\nxlabel : str, optional\n    Label for the x-axis.\nylabel : str, optional\n    Label for the y-axis.\ntitle : str, optional\n    The title of the plot. Default is 'Out of Sample Performance'.\nax : plt.Axes, optional\n    The Axes object for the plot.\nfigsize : Tuple[float, float], optional\n    The figure size. Default is (15, 6).\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    The Figure object containing the plot.\naxes : np.array\n    An array of Axes objects containing the plot.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;RMSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;horizon&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Out of Sample Performance&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.model_select": {"fullname": "forecast_combine.model_select", "modulename": "forecast_combine.model_select", "kind": "module", "doc": "<p>Combination of timeseries Forecasts</p>\n"}, "forecast_combine.model_select.fetch_errors": {"fullname": "forecast_combine.model_select.fetch_errors", "modulename": "forecast_combine.model_select", "qualname": "fetch_errors", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">item</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect": {"fullname": "forecast_combine.model_select.ForecastModelSelect", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect", "kind": "class", "doc": "<p>Class for model selection and comparison based on out-of-sample performance.\nEvaluate how to best combine the different models based on their oos performance.</p>\n\n<p>The class can be initialized in 2 ways. </p>\n\n<ul>\n<li><strong>Method 1</strong>: Requires a dictionary of forecasting models. A dictionary where the keys are names of forecasts and the values are sktime recognized forecast_models.\nAll the arguments taken by Forecast object must be passed to the initialization of the ForecastModelSelect object.</li>\n<li><strong>Method 2</strong>: Requires a dictionary of trained models. The training and evalutiaon of the models are assumed to be done.</li>\n</ul>\n\n<p>There is the possibility to combine the two methods by providing both dictionaries. \nIn this case, the trained models will be used for evaluation and the non-trained models will be trained and evaluated.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>forecasters_d (dict): A dictionary containing various forecasting models for comparison. \nDefault is None and assess the most common forecasting models.\n<ul>\n<li><strong>Naive:</strong> NaiveForecaster - Keep the latest value</li>\n<li><strong>SeasonalNaive:</strong> NaiveForecaster - Keep the value of the same season</li>\n<li><strong>AutoARIMA:</strong> StatsForecastAutoARIMA - Auto ARIMA model</li>\n<li><strong>AutoETS:</strong> StatsForecastAutoETS - Auto ETS model</li>\n<li><strong>AutoCES:</strong> StatsForecastAutoCES - Auto CES model</li>\n<li><strong>AutoTheta:</strong> StatsForecastAutoTheta - Auto Theta model</li>\n<li><strong>AutoTBATS:</strong> StatsForecastAutoTBATS - Auto TBATS model</li>\n<li><strong>Prophet:</strong> Prophet - Prophet model</li>\n</ul></li>\n<li>trained_forecasters_d (dict): A dictionary containing trained Forecast objects. Default is None.</li>\n<li>model_exog_d (dict): A dictionary containing exogenous variables for each model. Default is None.</li>\n<li>mode (str): The aggregation mode. Default is 'nbest_average_horizon'. Available values are:\n<ul>\n<li>best: The prediction is based on the best model.</li>\n<li>best_horizon: The prediction is based on the best model for each horizon.</li>\n<li>average: The average of the prediction of all models.</li>\n<li>inverse_score: The weighted average prediction, where weights are inversely proportional to the model performance score.</li>\n<li>nbest_average: Average of the n best models. The n is given by the parameter nbest.</li>\n<li>nbest_average_horizon: Average of the n best models for each horizon. The n is given by the parameter nbest.</li>\n<li>model: Returns the prediction of a specific model. The model name must be provided in the model_name parameter.</li>\n</ul></li>\n<li>score (str): The performance score. Default is 'RMSE'. Available values are:\n<ul>\n<li>RMSE: Root Mean Squared Error.</li>\n<li>MAE: Mean Absolute Error.</li>\n<li>MAPE: Mean Absolute Percentage Error.</li>\n<li>MedianAE: Median Absolute Error.</li>\n<li>R2: R-squared.       </li>\n</ul></li>\n<li>nbest (int): Number of best models to aggregate. Default is 2.    </li>\n<li>data (pd.DataFrame): A DataFrame containing the input data for forecasting.</li>\n<li>depvar_str (str): The column name representing the dependent variable for forecasting.</li>\n<li>fh (int): The forecast horizon, i.e., the number of periods ahead to forecast.</li>\n<li>pct_initial_window (float): The percentage of data used as the initial training window.</li>\n<li>step_length (int): The step size for expanding window cross-validation.    </li>\n<li>exog_l (list, optional): List of exogenous variables for forecasting. Default is None.</li>\n<li>freq (str, optional): The frequency of the time series data. Default is 'B' (business days).</li>\n</ul>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<ul>\n<li>LF_d (dict): A dictionary containing the Forecast objects.</li>\n<li>summary_horizon (pd.DataFrame): Summary of out-of-sample performance per horizon and per model.</li>\n<li>summary_results (pd.DataFrame): Summary of out-of-sample performance per model.</li>\n<li>summary_cutoff (pd.DataFrame): Out-of-sample performance based on cutoffs.</li>\n<li>model_rank_perhorizon (pd.DataFrame): Rank of models per horizon based on performance.</li>\n<li>_mode (str): The aggregation mode.</li>\n<li>_score (str): The performance score.</li>\n<li>_nbest (int): Number of best models to aggregate.</li>\n<li>_eval_models (list): A list of evaluated models.    </li>\n<li>_best_x_overall (dict): The best models based on overall performance.</li>\n<li>_avg_oos_horizon (dict): The average out-of-sample performance per horizon.</li>\n</ul>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>split_procedure_summary(): Print the summary of the split procedure for each model.</li>\n<li>add_forecaster(forecaster_name, lf): Add a Forecast Object to the list of models to evaluate.</li>\n<li>fit(on, fh, force, verbose): Fit the forecasting models for all the underlying Forecast objects.</li>\n<li>evaluate(force): Evaluate the underlying Forecast models out of sample.</li>\n<li>select_best(score, reestimate): Select the best model based on horizon and overall performance.</li>\n<li>summary_per_cutoff(score): Calculate and return the out-of-sample performance based on cutoffs.</li>\n<li>predict(X, fh, coverage, mode, score, model_name, ret_underlying): Make forecasts using the specified aggregation mode.</li>\n<li>update(new_y, new_X, refit, reevaluate, fh, coverage, mode, score, model_name, ret_underlying): Update the prediction for all the models and aggregate them based on the specific mode.</li>\n<li>save(path): Save the model to a file.</li>\n<li>get_pred_errors(mode, score, model_name): Get the prediction errors.</li>\n<li>plot_model_compare(score, view, model_subset, xlabel, ylabel, title, ax, figsize): Plot a comparison of models based on their out-of-sample performance.</li>\n<li>plot_prediction(y_pred, models_preds, y_pred_interval, interval_label, aggregation_label, xlabel, ylabel, title, ax): Plot the prediction.</li>\n</ul>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<ul>\n<li>AssertionError: If the trained models are not instances of Forecast.</li>\n<li>AssertionError: If there is an overlap between the trained and non-trained dictionaries.</li>\n<li>AssertionError: If the mode function is not implemented.</li>\n<li>AssertionError: If the performance score is not implemented.</li>\n<li>AssertionError: If the number of best models is not an integer.</li>\n<li>AssertionError: If the exogenous variables are missing for a model.</li>\n<li>ValueError: If the view mode is not 'horizon' or 'cutoff'.</li>\n<li>ValueError: If the mode is not 'best', 'best_horizon', 'average', 'inverse_score', 'nbest_average', 'nbest_average_horizon', or 'model'.</li>\n</ul>\n"}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"fullname": "forecast_combine.model_select.ForecastModelSelect.__init__", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.__init__", "kind": "function", "doc": "<p>Initialize the ForecastModelSelect object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">forecasters_d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">trained_forecasters_d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_exog_d</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;best_horizon&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;RMSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nbest</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"fullname": "forecast_combine.model_select.ForecastModelSelect.LF_d", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.LF_d", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"fullname": "forecast_combine.model_select.ForecastModelSelect.summary_horizon", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.summary_horizon", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"fullname": "forecast_combine.model_select.ForecastModelSelect.summary_results", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.summary_results", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"fullname": "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.model_rank_perhorizon", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"fullname": "forecast_combine.model_select.ForecastModelSelect.summary_cutoff", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.summary_cutoff", "kind": "variable", "doc": "<p></p>\n"}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"fullname": "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.split_procedure_summary", "kind": "function", "doc": "<p>Print the summary of the split procedure for each model.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>dict:\n    A dictionary containing details of the cross-validation procedure, including:\n    the number of folds, initial window size, step length, and forecast period.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"fullname": "forecast_combine.model_select.ForecastModelSelect.add_forecaster", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.add_forecaster", "kind": "function", "doc": "<p>Add a Forecast Object to the list of models to evaluate.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>lf : Forecast\n    The Forecast object to be added.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">forecaster_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">lf</span><span class=\"p\">:</span> <span class=\"n\">forecast_combine</span><span class=\"o\">.</span><span class=\"n\">forecast</span><span class=\"o\">.</span><span class=\"n\">Forecast</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.fit": {"fullname": "forecast_combine.model_select.ForecastModelSelect.fit", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.fit", "kind": "function", "doc": "<p>Fit the forecasting models for all the underlying Forecast objects.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>on : str, optional\n    The period for the in-sample fitting. Default is 'all'.\nfh : ForecastingHorizon, optional\n    The forecasting horizon. Default is None and it takes the value entered at initialization..\nforce : bool, optional\n    If True, force fitting even if the models are already fitted. Default is False.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">on</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fh</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sktime</span><span class=\"o\">.</span><span class=\"n\">forecasting</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">_fh</span><span class=\"o\">.</span><span class=\"n\">ForecastingHorizon</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"fullname": "forecast_combine.model_select.ForecastModelSelect.evaluate", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.evaluate", "kind": "function", "doc": "<p>Evaluate the underlying Forecast models out of sample.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>force : bool, optional\n    If True, force the evaluation even if the models are already evaluated. Default is False.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>tuple\n    A tuple containing the summary of out-of-sample performance per horizon and per model.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"fullname": "forecast_combine.model_select.ForecastModelSelect.select_best", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.select_best", "kind": "function", "doc": "<p>Select the best model based on horizon and overall performance.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>score : str, optional\n    The performance metric to use for model comparison. Default is None and it takes the value entered at initialization.\nnbest : int, optional\n    The number of best models to select based on horizon performance. Default is None and it takes the value entered at initialization.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>pd.DataFrame\n    model_rank_perhorizon. Rank of models per horizon based on performance.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reestimate</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"fullname": "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.summary_per_cutoff", "kind": "function", "doc": "<p>Calculate and return the out-of-sample performance based on cutoffs.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>score : str, optional\n    The performance metric to use for model comparison. Should be either 'RMSE' or 'MAPE'. Default is None and it takes the value entered at initialization.\nnbest : int, optional\n    The number of best models to select based on horizon performance. Default is None and it takes the value entered at initialization.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>pd.DataFrame\n    A DataFrame containing the out-of-sample performance per horizon and per model based on the specified score and nbest values.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.predict": {"fullname": "forecast_combine.model_select.ForecastModelSelect.predict", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.predict", "kind": "function", "doc": "<p>Make forecasts using the specified aggregation mode.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>X : pd.DataFrame, optional\n    The exogenous variables used for prediction. Default is None and it takes the value entered at initialization..\nfh : ForecastingHorizon, optional\n    The forecasting horizon. Default is None and it takes the value entered at initialization..\ncoverage : float, optional\n    The prediction interval coverage. Default is 0.9.\nmode : str, optional\n    The aggregation mode for predictions. Default is None and it takes the value entered at initialization.. \n    Available values:\n    * 'best': The prediction is based on the best model.\n    * 'best_horizon': The prediction is based on the best model for each horizon.\n    * 'average': The average of the prediction of all models.\n    * 'inverse_score': The weighted average prediction, where weights are inversely proportional to the model performance score.\n    * 'nbest_average': Average of the n best models. The n is given by the parameter nbest.\n    * 'nbest_average_horizon': Average of the n best models for each horizon. The n is given by the parameter nbest.\n    * 'model': Returns the prediction of a specific model. The model name must be provided in the model_name parameter.\nscore : str, optional\n    The performance metric to use for model comparison. Should be either 'RMSE' or 'MAPE'. Default is None and it takes the value entered at initialization..\nnbest : int, optional\n    The number of best models to select based on horizon performance. Default is None and it takes the value entered at initialization..\nmodel_name: str, optional\n    The model name to use for prediction if mode='model'. Default is None.\nret_underlying : bool, optional\n    If True, return the underlying predictions and prediction intervals for each model. Default is False.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>tuple\n    A tuple containing the aggregated prediction and prediction intervals.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fh</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sktime</span><span class=\"o\">.</span><span class=\"n\">forecasting</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">_fh</span><span class=\"o\">.</span><span class=\"n\">ForecastingHorizon</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coverage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ret_underlying</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.update": {"fullname": "forecast_combine.model_select.ForecastModelSelect.update", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.update", "kind": "function", "doc": "<p>Function to update the prediction for all the models and aggregate them based on the specific mode.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>newdata : pd.DataFrame\n    The new data for updating the predictions.\nrefit : bool, optional\n    If False, generate the prediction without fitting the model. If True, fits the underlying models again on the entire sample\n    Default is False\nreevaluate: bool, optional    \n    Reapply the cross-validateion, evaluate the models out of sample, select the best models, then aggregate the predictions according the setup.\n    Default is False.\nfh : ForecastingHorizon, optional\n    The forecasting horizon. Default is None and it takes the value entered at initialization..\ncoverage : float, optional\n    The prediction interval coverage. Default is 0.9.\nmode : str, optional\n    The aggregation mode for predictions. Default is None and it takes the value entered at initialization..\n    Available values:\n    * 'best': The prediction is based on the best model.\n    * 'best_horizon': The prediction is based on the best model for each horizon.\n    * 'average': The average of the prediction of all models.\n    * 'inverse_score': The weighted average prediction, where weights are inversely proportional to the model performance score.\n    * 'nbest_average': Average of the n best models. The n is given by the parameter nbest.\n    * 'nbest_average_horizon': Average of the n best models for each horizon. The n is given by the parameter nbest.\n    * 'model': Returns the prediction of a specific model. The model name must be provided in the model_name parameter.\nscore : str, optional\n    The performance metric to use for model comparison. Should be either 'RMSE' or 'MAPE'. Default is None and it takes the value entered at initialization..\nnbest : int, optional\n    The number of best models to select based on horizon performance. Default is None and it takes the value entered at initialization. and it takes the value entered at initialization..\nmodel_name: str, optional\n    The model name to use for prediction if mode='model'. Default is None.\nret_underlying : bool, optional\n    If True, return the underlying predictions and prediction intervals for each model. Default is False.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>tuple\n    A tuple containing the aggregated prediction and prediction intervals.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_y</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">new_X</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">refit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reevaluate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fh</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sktime</span><span class=\"o\">.</span><span class=\"n\">forecasting</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">_fh</span><span class=\"o\">.</span><span class=\"n\">ForecastingHorizon</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coverage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ret_underlying</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.save": {"fullname": "forecast_combine.model_select.ForecastModelSelect.save", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.save", "kind": "function", "doc": "<p>Save the model to a file.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>path : str\n    The path to save the model.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"fullname": "forecast_combine.model_select.ForecastModelSelect.get_pred_errors", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.get_pred_errors", "kind": "function", "doc": "<p>Get the prediction errors.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"fullname": "forecast_combine.model_select.ForecastModelSelect.plot_model_compare", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.plot_model_compare", "kind": "function", "doc": "<p>Plot a comparison of models based on their out-of-sample performance.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>score : str, optional\n    The performance metric for comparison. Should be either 'RMSE' or 'MAPE'. Default is 'RMSE'.\nview : str, optional\n    The view mode for comparison, either 'horizon' or 'cutoff'. Default is 'horizon'.\nxlabel : str, optional\n    The label for the x-axis. Default is an empty string.\nylabel : str, optional\n    The label for the y-axis. Default is an empty string.\ntitle : str, optional\n    The title of the plot. Default is 'Out of Sample Performance'.\nax : matplotlib.axes._subplots.AxesSubplot, optional\n    The matplotlib axes to use for plotting. Default is None.\nfigsize : tuple, optional\n    The size of the figure in inches (width, height). Default is (15, 6).\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>matplotlib.figure.Figure or matplotlib.axes._subplots.AxesSubplot\n    The figure and axes of the plot.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">score</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;RMSE&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;horizon&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model_subset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Out of Sample Performance&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">,</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"fullname": "forecast_combine.model_select.ForecastModelSelect.plot_prediction", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.plot_prediction", "kind": "function", "doc": "<p>Plot forecast predictions and aggregated prediction.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>y_pred : pd.Series\n    The aggregated prediction.\nmodels_preds : pd.DataFrame, optional\n    The DataFrame containing predictions from different models. Default is None.\ny_pred_interval : tuple, optional\n    Prediction interval for the aggregated prediction. Default is None.\ninterval_label : str, optional\n    Label for the prediction interval. Default is 'prediction interval'.\naggregation_label : str, optional\n    Label for the aggregated prediction. Default is 'Model Agg'.\nxlabel : str, optional\n    Label for the x-axis. Default is an empty string.\nylabel : str, optional\n    Label for the y-axis. Default is an empty string.\ntitle : str, optional\n    Title of the plot. Default is 'Prediction'.\nax : matplotlib.axes._subplots.AxesSubplot, optional\n    Matplotlib axes to use for plotting. Default is None.\nfigsize : tuple, optional\n    Size of the figure in inches (width, height). Default is (15, 6).\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>matplotlib.figure.Figure or matplotlib.axes._subplots.AxesSubplot\n    The figure and axes of the plot.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">models_preds</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interval_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CI&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">aggregation_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Model Agg&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Prediction&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"o\">.</span><span class=\"n\">Figure</span><span class=\"p\">,</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"fullname": "forecast_combine.model_select.ForecastModelSelect.plot_train_test", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.plot_train_test", "kind": "function", "doc": "<p>Plot the training and test windows for each model.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>kwargs\n    Additional keyword arguments to be passed to the plot function.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    If ax was None, a new figure is created and returned\n    If ax was not None, the same ax is returned with plot added\nax : plt.Axis             \n    Axes containing the plot\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"fullname": "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure", "modulename": "forecast_combine.model_select", "qualname": "ForecastModelSelect.plot_cv_procedure", "kind": "function", "doc": "<p>Plot the cross-validation procedure for each model.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>kwargs\n    Additional keyword arguments to be passed to the plot function.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    If ax was None, a new figure is created and returned\n    If ax was not None, the same ax is returned with plot added\nax : plt.Axis             \n    Axes containing the plot\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.reconcile": {"fullname": "forecast_combine.reconcile", "modulename": "forecast_combine.reconcile", "kind": "module", "doc": "<p>Hierarchical Time Series Forecast Reconciliation.</p>\n"}, "forecast_combine.reconcile.ForecastReconciler": {"fullname": "forecast_combine.reconcile.ForecastReconciler", "modulename": "forecast_combine.reconcile", "qualname": "ForecastReconciler", "kind": "class", "doc": "<p>ForecastReconciler class to apply the hiearachical reconciliation of the child node forecast with the total forecast.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<ul>\n<li>forecasters_d (Dict[str, any]): Dictionary of forecasters to reconcile.</li>\n<li>S (pd.DataFrame): Summation matrix.</li>\n<li>method (str): Reconciliation method to use. Default is 'mint'. Available methods are \n<ul>\n<li>ols: Ordinary Least Squares</li>\n<li>wls: Weighted Least Squares</li>\n<li>mint: Minimum Trace</li>\n<li>td: Top-Down        </li>\n<li>bu: Bottom-Up</li>\n</ul></li>\n</ul>\n\n<h2 id=\"attributes\">Attributes:</h2>\n\n<ul>\n<li>_forecasters_d (Dict[str, any]): Dictionary of forecasters to reconcile.</li>\n<li>_Total (str): Name of the total forecast.</li>\n<li>_forecasters_order (List[str]): Order of the forecasters.</li>\n<li>_S (np.array): Summation matrix.</li>\n<li>_method (str): Reconciliation method to use.</li>\n<li>_historical_values_d (Dict[str, pd.Series]): Dictionary of historical values for each forecaster.</li>\n<li>_historical_errors_d (Dict[str, pd.DataFrame]): Dictionary of historical errors for each forecaster.</li>\n<li>_weights (Dict[str, np.array]): Dictionary of weights for each forecaster.</li>\n</ul>\n\n<h2 id=\"methods\">Methods:</h2>\n\n<ul>\n<li>fit(refit_models: bool = False, reconciliation_method: Optional[str] = None) -> None:\nPrepare the reconciliation weights or parameters based on historical data.\nOptionally refit models.</li>\n<li>predict(X: Dict[str, pd.DataFrame] = None, coverage: float = 0.9, reconciliation_method: Optional[str] = None, verbose: bool = False) -> pd.DataFrame:\nApply the reconciliation method to the forecasts.</li>\n<li>update(new_y:Dict[str, pd.Series], new_X: Dict[str, pd.DataFrame] = None, reconciliation_method: Optional[str] = None, coverage: float = 0.9, refit: bool = False, reevaluate:bool = False, verbose: bool = False) -> pd.DataFrame:\nUpdate the forecast with new data.</li>\n<li>reconcile_preds(forecast_data: Dict[str, pd.DataFrame], forecast_intervals: Dict[str, pd.DataFrame], reconciliation_method: Optional[str] = None) -> pd.DataFrame:\nApply the reconciliation method to the forecasts.</li>\n<li>plot_predict(reconciled_preds, reconciled_intervals, interval_label: str = 'CI', title: str = 'Reconciled Predictions') -> None:\nPlot the reconciled predictions and intervals.</li>\n</ul>\n\n<h2 id=\"raises\">Raises:</h2>\n\n<ul>\n<li>AssertionError: If the number of forecasters does not match the number of rows in S.</li>\n<li>AssertionError: If the number of columns in S does not match the number of the child forecasters.</li>\n<li>AssertionError: If the index values of S do not match the keys in forecasters_d.</li>\n<li>AssertionError: If the reconciliation method is invalid.</li>\n</ul>\n"}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"fullname": "forecast_combine.reconcile.ForecastReconciler.__init__", "modulename": "forecast_combine.reconcile", "qualname": "ForecastReconciler.__init__", "kind": "function", "doc": "<p>Inintialize the ForecastReconciler class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">forecasters_d</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">any</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">S</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mint&#39;</span></span>)</span>"}, "forecast_combine.reconcile.ForecastReconciler.fit": {"fullname": "forecast_combine.reconcile.ForecastReconciler.fit", "modulename": "forecast_combine.reconcile", "qualname": "ForecastReconciler.fit", "kind": "function", "doc": "<p>Prepare the reconciliation weights or parameters based on historical data.\nOptionally refit models.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">refit_models</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reconciliation_method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "forecast_combine.reconcile.ForecastReconciler.predict": {"fullname": "forecast_combine.reconcile.ForecastReconciler.predict", "modulename": "forecast_combine.reconcile", "qualname": "ForecastReconciler.predict", "kind": "function", "doc": "<p>Apply the reconciliation method to the forecasts.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>X (Optional[pd.DataFrame]): \n    DataFrame containing independent variables for prediction, if needed.\ncoverage (float):\n    Confidence interval for the forecast quantiles.\nreconciliation_method (Optional[str]):\n    Override the default method for this prediction.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>reconciled_preds (Dict[str, pd.Series]):\n    Dictionary of reconciled forecasts.\nreconciled_intervals (Dict[str, pd.DataFrame]):\n    Dictionary of reconciled forecast intervals.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coverage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">reconciliation_method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.reconcile.ForecastReconciler.update": {"fullname": "forecast_combine.reconcile.ForecastReconciler.update", "modulename": "forecast_combine.reconcile", "qualname": "ForecastReconciler.update", "kind": "function", "doc": "<p>Update the forecast with new data.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>newdata (pd.DataFrame): \n    New data to update the forecast.\nreconciliation_method (Optional[str]):\n    Override the default method for this prediction.\nrefit (bool):\n    If True, refit the models before updating the forecast.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<h2 id=\"returns-2\">Returns:</h2>\n\n<pre><code>reconciled_preds (Dict[str, pd.Series]):\n    Dictionary of reconciled forecasts.\nreconciled_intervals (Dict[str, pd.DataFrame]):\n    Dictionary of reconciled forecast intervals.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_y</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">new_X</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reconciliation_method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">coverage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">refit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">reevaluate</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"fullname": "forecast_combine.reconcile.ForecastReconciler.reconcile_preds", "modulename": "forecast_combine.reconcile", "qualname": "ForecastReconciler.reconcile_preds", "kind": "function", "doc": "<p>Apply the reconciliation method to the forecasts.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>forecast_data (Dict[str, pd.DataFrame]): \n    Dictionary of forecasts for each series.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>reconciled_preds (Dict[str, pd.Series]):\n    Dictionary of reconciled forecasts.\nreconciled_intervals (Dict[str, pd.DataFrame]):\n    Dictionary of reconciled forecast intervals.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">forecast_data</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">forecast_intervals</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">reconciliation_method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"fullname": "forecast_combine.reconcile.ForecastReconciler.plot_predict", "modulename": "forecast_combine.reconcile", "qualname": "ForecastReconciler.plot_predict", "kind": "function", "doc": "<p>Plot the reconciled predictions and intervals.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>reconciled_preds (Dict[str, pd.Series]): \n    Dictionary of reconciled forecasts.\nreconciled_intervals (Dict[str, pd.DataFrame]):\n    Dictionary of reconciled forecast intervals.\ninterval_label (str):\n    Label for the confidence interval.\ntitle (str):\n    Title of the plot.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig (plt.Figure):\n    Plot figure.\naxes (plt.Axes):\n    Plot axes.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reconciled_preds</span>,</span><span class=\"param\">\t<span class=\"n\">reconciled_intervals</span>,</span><span class=\"param\">\t<span class=\"n\">interval_label</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CI&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Reconciled Predictions&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils": {"fullname": "forecast_combine.utils", "modulename": "forecast_combine.utils", "kind": "module", "doc": "<p></p>\n"}, "forecast_combine.utils.explore": {"fullname": "forecast_combine.utils.explore", "modulename": "forecast_combine.utils.explore", "kind": "module", "doc": "<p></p>\n"}, "forecast_combine.utils.explore.plot_time_series": {"fullname": "forecast_combine.utils.explore.plot_time_series", "modulename": "forecast_combine.utils.explore", "qualname": "plot_time_series", "kind": "function", "doc": "<p>Plot time series data with date on x-axis and value on y-axis.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series: pd.Series\n    Time series data\ntitle: str\n    Title of the plot\nxlabel: str\n    Label for x-axis\nylabel: str\n    Label for y-axis\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Time Series Plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Date&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Value&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.explore.plot_acf_pacf": {"fullname": "forecast_combine.utils.explore.plot_acf_pacf", "modulename": "forecast_combine.utils.explore", "qualname": "plot_acf_pacf", "kind": "function", "doc": "<p>Plot ACF and PACF plots for the given time series data.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series: pd.Series\n    Time series data\nlags: int\n    Number of lags to consider\ntitle: str\n    Title of the plot\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">40</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ACF and PACF Plots&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.explore.test_stationarity": {"fullname": "forecast_combine.utils.explore.test_stationarity", "modulename": "forecast_combine.utils.explore", "qualname": "test_stationarity", "kind": "function", "doc": "<p>Perform Dickey-Fuller test for stationarity of the given time series data.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series: pd.Series\n    Time series data\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.explore.decompose_series": {"fullname": "forecast_combine.utils.explore.decompose_series", "modulename": "forecast_combine.utils.explore", "qualname": "decompose_series", "kind": "function", "doc": "<p>Decompose the time series data into trend, seasonal and residual components.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series: pd.Series\n    Time series data\nperiod: int\n    Period of the seasonal component\ntitle: str\n    Title of the plot\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>decomposition: statsmodels.tsa.seasonal.DecomposeResult\n    Decomposed time series data\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Time Series Decomposition&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"fullname": "forecast_combine.utils.explore.plot_yearly_seasonality", "modulename": "forecast_combine.utils.explore", "qualname": "plot_yearly_seasonality", "kind": "function", "doc": "<p>Plot yearly seasonality of the given time series data.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series: pd.Series\n    Time series data\ntitle: str\n    Title of the plot\nshow_all: bool\n    Whether to show all yearly patterns or just the average\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Yearly Seasonality&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_all</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"fullname": "forecast_combine.utils.explore.analyze_monthly_pattern", "modulename": "forecast_combine.utils.explore", "qualname": "analyze_monthly_pattern", "kind": "function", "doc": "<p>Analyze monthly seasonality of the given time series data after removing yearly seasonality.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series: pd.Series\n    Time series data\ntitle: str\n    Title of the plot\nshow_all: bool\n    Whether to show all monthly patterns or just the average\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Monthly Seasonality&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_all</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"fullname": "forecast_combine.utils.explore.analyze_weekly_pattern", "modulename": "forecast_combine.utils.explore", "qualname": "analyze_weekly_pattern", "kind": "function", "doc": "<p>Analyze weekly seasonality of the given time series data after removing yearly and monthly seasonality.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series: pd.Series\n    Time series data\ntitle: str\n    Title of the plot\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>, </span><span class=\"param\"><span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Weekly Seasonality&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.explore.analyse_series": {"fullname": "forecast_combine.utils.explore.analyse_series", "modulename": "forecast_combine.utils.explore", "qualname": "analyse_series", "kind": "function", "doc": "<p>Wrapper function to all the above functions to analyze the given time series data.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series: pd.Series\n    Time series data\nseries_name: str\n    Name of the time series\nperiod: int\n    Period of the seasonal component\nacf_lags: int\n    Number of lags to consider for ACF and PACF plots\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>None\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">series</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">series_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">acf_lags</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">40</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.metrics": {"fullname": "forecast_combine.utils.metrics", "modulename": "forecast_combine.utils.metrics", "kind": "module", "doc": "<p></p>\n"}, "forecast_combine.utils.metrics.evaluate_metrics": {"fullname": "forecast_combine.utils.metrics.evaluate_metrics", "modulename": "forecast_combine.utils.metrics", "qualname": "evaluate_metrics", "kind": "function", "doc": "<p>Computes performance metrics for the fitted curve. The currently covered performance metrics include </p>\n\n<ul>\n<li>RMSE: Root Mean Squared Error</li>\n<li>MAE: Mean Absolute Error</li>\n<li>MAPE: Mean Absolute Percentage Error</li>\n<li>R2: R-squared</li>\n<li>MedianAE: Median Absolute Error</li>\n</ul>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>y_true (array-like): \n    The true values.\ny_pred (array-like): \n    The predicted values.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>Series: A series containing the performance metrics.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y_true</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.metrics.summary_perf": {"fullname": "forecast_combine.utils.metrics.summary_perf", "modulename": "forecast_combine.utils.metrics", "qualname": "summary_perf", "kind": "function", "doc": "<p>Compute summary performance metrics for a given forecast.</p>\n\n<ul>\n<li>RMSE: Root Mean Squared Error</li>\n<li>MAE: Mean Absolute Error</li>\n<li>MAPE: Mean Absolute Percentage Error</li>\n<li>R2: R-squared</li>\n<li>MedianAE: Median Absolute Error</li>\n</ul>\n\n<h2 id=\"parameters\">    Parameters:</h2>\n\n<pre><code>    insample_result_df (DataFrame): \n    A DataFrame containing the forecast results.\n        grouper (str): \n    The column name to group the forecast results for computing summary metrics.\n        y_true_col (str, optional):\n    The column name representing the true values. Default is 'y_true'.\n        y_pred_col (str, optional): \n    The column name representing the predicted values. Default is 'y_pred'.\n</code></pre>\n\n<h2 id=\"returns\">    Returns:</h2>\n\n<pre><code>        DataFrame: A DataFrame containing summary performance metrics.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">insample_result_df</span>,</span><span class=\"param\">\t<span class=\"n\">grouper</span>,</span><span class=\"param\">\t<span class=\"n\">y_true_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;y_true&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_pred_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;y_pred&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"fullname": "forecast_combine.utils.metrics.calculate_prediction_interval", "modulename": "forecast_combine.utils.metrics", "qualname": "calculate_prediction_interval", "kind": "function", "doc": "<p>Calculate the prediction interval for given predictions based on historical errors.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>historical_errors : array-like\n    Array of historical prediction errors (actual - predicted values).\ny_pred : float or array-like\n    Predicted value(s) for which the prediction interval is required.\ncoverage : float, optional\n    Desired coverage of the prediction interval. Default is 0.90.</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>interval : tuple\n    A tuple containing the lower and upper bounds of the prediction interval.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">historical_errors</span>, </span><span class=\"param\"><span class=\"n\">y_pred</span>, </span><span class=\"param\"><span class=\"n\">coverage</span><span class=\"o\">=</span><span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.plotting": {"fullname": "forecast_combine.utils.plotting", "modulename": "forecast_combine.utils.plotting", "kind": "module", "doc": "<p></p>\n"}, "forecast_combine.utils.plotting.plot_series": {"fullname": "forecast_combine.utils.plotting.plot_series", "modulename": "forecast_combine.utils.plotting", "qualname": "plot_series", "kind": "function", "doc": "<p>Plot one or more time series.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>series : pd.Series or iterable of pd.Series\n    One or more time series\nlabels : list, default = None\n    Names of series, will be displayed in figure legend\nmarkers: list, default = None\n    Markers of data points, if None the marker \"o\" is used by default.\n    The length of the list has to match with the number of series.\ncolors: list, default = None\n    The colors to use for plotting each series. Must contain one color per series\ntitle: str, default = None\n    The text to use as the figure's suptitle\npred_interval: pd.DataFrame, default = None\n    Output of `forecaster.predict_interval()`. Contains columns for lower\n    and upper boundaries of confidence interval.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\nax : plt.Axis\n</code></pre>\n\n<h2 id=\"examples\">Examples:</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sktime.utils.plotting</span> <span class=\"kn\">import</span> <span class=\"n\">plot_series</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sktime.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_airline</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">load_airline</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plot_series</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">series</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">markers</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">pred_interval</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interval_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;prediction interval&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.plotting.plot_interval": {"fullname": "forecast_combine.utils.plotting.plot_interval", "modulename": "forecast_combine.utils.plotting", "qualname": "plot_interval", "kind": "function", "doc": "<p>Plot the confidence interval within a plot.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>ax : plt.Axes\n    The Axes object for the plot.\ninterval_df : pd.DataFrame\n    Output of `forecaster.predict_interval()`. Contains columns for lower\n    and upper boundaries of confidence interval.\nlegend_label : str, default = 'prediction interval'\n    The label for the legend.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>ax : plt.Axes\n    Axes containing the plot\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ax</span>, </span><span class=\"param\"><span class=\"n\">interval_df</span>, </span><span class=\"param\"><span class=\"n\">legend_label</span><span class=\"o\">=</span><span class=\"s1\">&#39;prediction interval&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "forecast_combine.utils.plotting.plot_windows": {"fullname": "forecast_combine.utils.plotting.plot_windows", "modulename": "forecast_combine.utils.plotting", "qualname": "plot_windows", "kind": "function", "doc": "<p>Visualize training and test windows.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<pre><code>train_windows : List[np.ndarray]\n    List of training window indices.\ntest_windows : List[np.ndarray]\n    List of test window indices.\nax : plt.Axes\n    The Axes object for the plot.\nlabels : List[str]\n    Labels for the plot.\nylabel : str\n    Label for the y-axis.\nxlabel : str\n    Label for the x-axis.\ntitle : str\n    The title of the plot.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<pre><code>fig : plt.Figure\n    If ax was None, a new figure is created and returned\n    If ax was not None, the same ax is returned with plot added\nax : plt.Axis             \n    Axes containing the plot\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">train_windows</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">test_windows</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ax</span><span class=\"p\">:</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">axes</span><span class=\"o\">.</span><span class=\"n\">_axes</span><span class=\"o\">.</span><span class=\"n\">Axes</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"forecast_combine": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "forecast_combine.forecast.CommonForecastingModels": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 48, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.Forecast": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 673}, "forecast_combine.forecast.Forecast.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 184, "bases": 0, "doc": 11}, "forecast_combine.forecast.Forecast.forecaster_name": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.Forecast.is_fitted": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.Forecast.is_evaluated": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.Forecast.plot": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 50}, "forecast_combine.forecast.Forecast.fit": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 79, "bases": 0, "doc": 71}, "forecast_combine.forecast.Forecast.evaluate": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 31}, "forecast_combine.forecast.Forecast.predict": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 171, "bases": 0, "doc": 84}, "forecast_combine.forecast.Forecast.update": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 206, "bases": 0, "doc": 111}, "forecast_combine.forecast.Forecast.get_pred_errors": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 23}, "forecast_combine.forecast.ForecastPlot": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 222}, "forecast_combine.forecast.ForecastPlot.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 190, "bases": 0, "doc": 123}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 145, "bases": 0, "doc": 111}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 279, "bases": 0, "doc": 153}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 279, "bases": 0, "doc": 157}, "forecast_combine.forecast.compute_predictions": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFit": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 236}, "forecast_combine.forecast.ForecastFit.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFit.forecaster": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFit.is_fitted": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFit.plot": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFit.insample_result_df": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 48}, "forecast_combine.forecast.ForecastFit.insample_perf": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 31}, "forecast_combine.forecast.ForecastFitPlot": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 57}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 71}, "forecast_combine.forecast.ForecastEval": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 262}, "forecast_combine.forecast.ForecastEval.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastEval.forecaster": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastEval.oos_eval": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastEval.plot": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastEval.summary_results": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 34}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 35}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 35}, "forecast_combine.forecast.ForecastEvalPlot": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 108}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 3}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 199, "bases": 0, "doc": 153}, "forecast_combine.model_select": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "forecast_combine.model_select.fetch_errors": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "forecast_combine.model_select.ForecastModelSelect": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 1163}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 157, "bases": 0, "doc": 7}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 44}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 31}, "forecast_combine.model_select.ForecastModelSelect.fit": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 118, "bases": 0, "doc": 80}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 62}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 91}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 108}, "forecast_combine.model_select.ForecastModelSelect.predict": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 239, "bases": 0, "doc": 318}, "forecast_combine.model_select.ForecastModelSelect.update": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 303, "bases": 0, "doc": 379}, "forecast_combine.model_select.ForecastModelSelect.save": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 35}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 7}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 281, "bases": 0, "doc": 159}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 339, "bases": 0, "doc": 178}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 75}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 74}, "forecast_combine.reconcile": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "forecast_combine.reconcile.ForecastReconciler": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 442}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 7}, "forecast_combine.reconcile.ForecastReconciler.fit": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 16}, "forecast_combine.reconcile.ForecastReconciler.predict": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 137, "bases": 0, "doc": 79}, "forecast_combine.reconcile.ForecastReconciler.update": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 213, "bases": 0, "doc": 82}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 133, "bases": 0, "doc": 59}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 74}, "forecast_combine.utils": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.utils.explore": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.utils.explore.plot_time_series": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 58}, "forecast_combine.utils.explore.plot_acf_pacf": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 50}, "forecast_combine.utils.explore.test_stationarity": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 38}, "forecast_combine.utils.explore.decompose_series": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 58}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 54}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 58}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 47}, "forecast_combine.utils.explore.analyse_series": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 91, "bases": 0, "doc": 68}, "forecast_combine.utils.metrics": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.utils.metrics.evaluate_metrics": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 90}, "forecast_combine.utils.metrics.summary_perf": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 133}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 85}, "forecast_combine.utils.plotting": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "forecast_combine.utils.plotting.plot_series": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 143, "bases": 0, "doc": 250}, "forecast_combine.utils.plotting.plot_interval": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 77}, "forecast_combine.utils.plotting.plot_windows": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 158, "bases": 0, "doc": 121}}, "length": 96, "save": true}, "index": {"qualname": {"root": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 8, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.compute_predictions": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.forecaster_name": {"tf": 1}, "forecast_combine.forecast.Forecast.is_fitted": {"tf": 1}, "forecast_combine.forecast.Forecast.is_evaluated": {"tf": 1}, "forecast_combine.forecast.Forecast.plot": {"tf": 1}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 6}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1}, "forecast_combine.forecast.ForecastEval.plot": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}}, "df": 9, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 3}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}}, "df": 6}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1}, "forecast_combine.forecast.ForecastFit.plot": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}}, "df": 10, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 21}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast.is_fitted": {"tf": 1}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.model_select.fetch_errors": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 8}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}}, "df": 5}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {"forecast_combine.forecast.Forecast.is_fitted": {"tf": 1}, "forecast_combine.forecast.Forecast.is_evaluated": {"tf": 1}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 3, "d": {"docs": {"forecast_combine.forecast.Forecast.is_evaluated": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.fetch_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}}, "df": 3}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.plot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit.plot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval.plot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 20}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 4, "s": {"docs": {"forecast_combine.forecast.compute_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}}, "df": 1, "f": {"docs": {"forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 11}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.test_stationarity": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 3}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.plot_time_series": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}}, "df": 1, "s": {"docs": {"forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}}, "df": 1, "f": {"docs": {"forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 1}}}}}}}}}, "fullname": {"root": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 8, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine": {"tf": 1}, "forecast_combine.forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.CommonForecastingModels": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.forecaster_name": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.is_fitted": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.is_evaluated": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.plot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.compute_predictions": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.forecaster": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.plot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.forecaster": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.plot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select": {"tf": 1}, "forecast_combine.model_select.fetch_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils": {"tf": 1}, "forecast_combine.utils.explore": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 96, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 6}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1}, "forecast_combine.forecast.ForecastEval.plot": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}}, "df": 9, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 3}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}}, "df": 6}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1}, "forecast_combine.forecast.ForecastFit.plot": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}}, "df": 10, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 21}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast.is_fitted": {"tf": 1}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.model_select.fetch_errors": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine": {"tf": 1}, "forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.CommonForecastingModels": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.forecaster_name": {"tf": 1}, "forecast_combine.forecast.Forecast.is_fitted": {"tf": 1}, "forecast_combine.forecast.Forecast.is_evaluated": {"tf": 1}, "forecast_combine.forecast.Forecast.plot": {"tf": 1}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.compute_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1}, "forecast_combine.forecast.ForecastFit.plot": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1}, "forecast_combine.forecast.ForecastEval.plot": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select": {"tf": 1}, "forecast_combine.model_select.fetch_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils": {"tf": 1}, "forecast_combine.utils.explore": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 96}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.compute_predictions": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 8}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}}, "df": 5}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {"forecast_combine.forecast.Forecast.is_fitted": {"tf": 1}, "forecast_combine.forecast.Forecast.is_evaluated": {"tf": 1}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 3, "d": {"docs": {"forecast_combine.forecast.Forecast.is_evaluated": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.fetch_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}}, "df": 3}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 9}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.plot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit.plot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval.plot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 20, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.utils.plotting": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 4}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 4, "s": {"docs": {"forecast_combine.forecast.compute_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}}, "df": 1, "f": {"docs": {"forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 11}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select": {"tf": 1}, "forecast_combine.model_select.fetch_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 23}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.test_stationarity": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils": {"tf": 1}, "forecast_combine.utils.explore": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 18}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.plot_time_series": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}}, "df": 1, "s": {"docs": {"forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.reconcile": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 8}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}}, "df": 1, "f": {"docs": {"forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.model_select": {"tf": 1}, "forecast_combine.model_select.fetch_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 23}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.metrics": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 1}}}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"1": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}, "5": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}, "docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 3.1622776601683795}}, "df": 1, "x": {"2": {"7": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 4}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1.4142135623730951}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "p": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.CommonForecastingModels": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "signature": {"root": {"0": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 7}, "1": {"0": {"0": {"docs": {"forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "2": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2}, "5": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 7}, "docs": {}, "df": 0}, "3": {"9": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 2}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 2}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 3.1622776601683795}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 2}, "forecast_combine.utils.explore.plot_time_series": {"tf": 2.449489742783178}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.decompose_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 2}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.4142135623730951}}, "df": 24}, "docs": {}, "df": 0}, "4": {"0": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "6": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 7}, "9": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 7}, "docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 12.041594578792296}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 5.0990195135927845}, "forecast_combine.forecast.Forecast.fit": {"tf": 8.06225774829855}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 3.1622776601683795}, "forecast_combine.forecast.Forecast.predict": {"tf": 11.832159566199232}, "forecast_combine.forecast.Forecast.update": {"tf": 12.922847983320086}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 3.1622776601683795}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 4.47213595499958}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 12.529964086141668}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 10.723805294763608}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 15.066519173319364}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 15.066519173319364}, "forecast_combine.forecast.compute_predictions": {"tf": 3.1622776601683795}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 4.47213595499958}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 7.615773105863909}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 3.4641016151377544}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 4.47213595499958}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 6.48074069840786}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 4.47213595499958}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 4.898979485566356}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 4.898979485566356}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 4.898979485566356}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 4.47213595499958}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 12.68857754044952}, "forecast_combine.model_select.fetch_errors": {"tf": 3.1622776601683795}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 11.135528725660043}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 3.1622776601683795}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 6.244997998398398}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 9.848857801796104}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 5.0990195135927845}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 7.3484692283495345}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 6.557438524302}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 13.96424004376894}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 15.684387141358123}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 4.242640687119285}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 7.745966692414834}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 15.066519173319364}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 16.46207763315433}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 4.47213595499958}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 4.47213595499958}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 8.660254037844387}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 6.928203230275509}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 10.583005244258363}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 13.152946437965905}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 10.344080432788601}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 7.416198487095663}, "forecast_combine.utils.explore.plot_time_series": {"tf": 8.831760866327848}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 7.681145747868608}, "forecast_combine.utils.explore.test_stationarity": {"tf": 5.0990195135927845}, "forecast_combine.utils.explore.decompose_series": {"tf": 7.681145747868608}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 7.681145747868608}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 7.681145747868608}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 6.48074069840786}, "forecast_combine.utils.explore.analyse_series": {"tf": 8.602325267042627}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 3.7416573867739413}, "forecast_combine.utils.metrics.summary_perf": {"tf": 6.164414002968976}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 4.69041575982343}, "forecast_combine.utils.plotting.plot_series": {"tf": 10.770329614269007}, "forecast_combine.utils.plotting.plot_interval": {"tf": 4.898979485566356}, "forecast_combine.utils.plotting.plot_windows": {"tf": 11.313708498984761}}, "df": 60, "d": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 2, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}}, "df": 20}}}}}}, "e": {"docs": {"forecast_combine.utils.explore.plot_time_series": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.4142135623730951}}, "df": 7}}}, "f": {"docs": {"forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 27}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.compute_predictions": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 5, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 3}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.utils.explore.plot_time_series": {"tf": 1}}, "df": 1, "s": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 27}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 7}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 6}}}}}, "l": {"docs": {"forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 4}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}}, "df": 20}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}}}, "h": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}}, "df": 7}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 11}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.4142135623730951}}, "df": 7, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 2, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 2}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 6, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 6}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 12}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 7}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 2}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2.23606797749979}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 2}}, "df": 33}, "e": {"docs": {}, "df": 0, "p": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 36}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_time_series": {"tf": 2}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.decompose_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.analyse_series": {"tf": 2}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 17}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 3}}}}}}}}}}, "k": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 6}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 8}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"forecast_combine.model_select.fetch_errors": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}}, "df": 2, "s": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 7}}}, "f": {"docs": {"forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 4, "f": {"docs": {"forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1}}, "df": 1}, "e": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 6, "s": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 6}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 2.8284271247461903}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 25}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}}, "df": 3}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 2}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 22}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 2}}, "f": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 6}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.plot_time_series": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 11}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 6}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}}, "df": 4}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}}, "df": 11}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 17}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 4}}, "x": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 10, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2.449489742783178}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 8}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 4}, "d": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2}}}, "x": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 10}}}}}}, "y": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 2}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 10, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 10}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 4}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 8}}}}}}}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 5}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}}, "df": 4, "l": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 6, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}}}}}}}}}}, "k": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 3}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 1}}}}}}}}}, "bases": {"root": {"docs": {}, "df": 0}}, "doc": {"root": {"0": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 7}, "1": {"0": {"0": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "5": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 8}, "docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}, "2": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}}, "df": 1}, "6": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 8}, "9": {"0": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}, "docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 6}, "docs": {"forecast_combine": {"tf": 1.7320508075688772}, "forecast_combine.forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.CommonForecastingModels": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast": {"tf": 13.711309200802088}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.forecaster_name": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.is_fitted": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.is_evaluated": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.plot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 4.242640687119285}, "forecast_combine.forecast.Forecast.fit": {"tf": 4.358898943540674}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 3.1622776601683795}, "forecast_combine.forecast.Forecast.predict": {"tf": 4.47213595499958}, "forecast_combine.forecast.Forecast.update": {"tf": 4.69041575982343}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 3.1622776601683795}, "forecast_combine.forecast.ForecastPlot": {"tf": 5.830951894845301}, "forecast_combine.forecast.ForecastPlot.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 5.196152422706632}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 5.0990195135927845}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 5.477225575051661}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 5.477225575051661}, "forecast_combine.forecast.compute_predictions": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit": {"tf": 9.055385138137417}, "forecast_combine.forecast.ForecastFit.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.forecaster": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.forecaster_name": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.is_fitted": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.plot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.insample_result_df": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.insample_perf_summary": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 4.242640687119285}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 3.1622776601683795}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 4.795831523312719}, "forecast_combine.forecast.ForecastFitPlot.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 4.58257569495584}, "forecast_combine.forecast.ForecastEval": {"tf": 9.38083151964686}, "forecast_combine.forecast.ForecastEval.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval.forecaster": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval.forecaster_name": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval.oos_eval": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval.plot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 3.1622776601683795}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 3.1622776601683795}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 3.1622776601683795}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 4.795831523312719}, "forecast_combine.forecast.ForecastEvalPlot.__init__": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 5}, "forecast_combine.model_select": {"tf": 1.4142135623730951}, "forecast_combine.model_select.fetch_errors": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 17.26267650163207}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.LF_d": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_horizon": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_results": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.model_rank_perhorizon": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_cutoff": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 3.1622776601683795}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 3.3166247903554}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 4.47213595499958}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 4.242640687119285}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 4.358898943540674}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 4.358898943540674}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 6.164414002968976}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 6.244997998398398}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 4.242640687119285}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 4.898979485566356}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 5.196152422706632}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 4.358898943540674}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 4.358898943540674}, "forecast_combine.reconcile": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 11.180339887498949}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 4.69041575982343}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 4.898979485566356}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 4.47213595499958}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 4.795831523312719}, "forecast_combine.utils": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_time_series": {"tf": 4.123105625617661}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 4.123105625617661}, "forecast_combine.utils.explore.test_stationarity": {"tf": 4.123105625617661}, "forecast_combine.utils.explore.decompose_series": {"tf": 4.123105625617661}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 4.123105625617661}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 4.123105625617661}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 4.123105625617661}, "forecast_combine.utils.explore.analyse_series": {"tf": 4.123105625617661}, "forecast_combine.utils.metrics": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 5.744562646538029}, "forecast_combine.utils.metrics.summary_perf": {"tf": 6.244997998398398}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 4.123105625617661}, "forecast_combine.utils.plotting": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_series": {"tf": 9.695359714832659}, "forecast_combine.utils.plotting.plot_interval": {"tf": 4.69041575982343}, "forecast_combine.utils.plotting.plot_windows": {"tf": 5.0990195135927845}}, "df": 96, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.reconcile": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.decompose_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 14, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.model_select": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.decompose_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 22}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 6.928203230275509}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 2}, "forecast_combine.forecast.Forecast.fit": {"tf": 2.23606797749979}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.predict": {"tf": 2.449489742783178}, "forecast_combine.forecast.Forecast.update": {"tf": 3}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 3}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 3.7416573867739413}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 3.3166247903554}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 4.123105625617661}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 4.123105625617661}, "forecast_combine.forecast.ForecastFit": {"tf": 4.242640687119285}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 2}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 2.6457513110645907}, "forecast_combine.forecast.ForecastEval": {"tf": 3.605551275463989}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 4.123105625617661}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 8.602325267042627}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 5.656854249492381}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 6.6332495807108}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 3.605551275463989}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 3.3166247903554}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 4.47213595499958}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 2.23606797749979}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyse_series": {"tf": 2}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 2.23606797749979}, "forecast_combine.utils.metrics.summary_perf": {"tf": 2.6457513110645907}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 2.23606797749979}, "forecast_combine.utils.plotting.plot_series": {"tf": 2.6457513110645907}, "forecast_combine.utils.plotting.plot_interval": {"tf": 2.449489742783178}, "forecast_combine.utils.plotting.plot_windows": {"tf": 3}}, "df": 59, "i": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1}}, "t": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "m": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 2}, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 3}}}, "o": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.3166247903554}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2.6457513110645907}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.7320508075688772}}, "df": 26, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}}, "df": 1}}}, "p": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 3}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}}, "df": 12}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 6}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.4142135623730951}}, "df": 8, "[": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}}, "df": 3}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 6}}}}}}}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}}, "df": 7}, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 3.3166247903554}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastFit": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 2}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.7416573867739413}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_windows": {"tf": 2}}, "df": 42, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.449489742783178}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 2}, "forecast_combine.forecast.ForecastEval": {"tf": 2}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.1622776601683795}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2.449489742783178}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}}, "df": 25, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 3.3166247903554}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 2}, "forecast_combine.forecast.ForecastEval": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 10, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 8}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.6457513110645907}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 9, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 3}}, "df": 2}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.7320508075688772}}, "df": 3, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1.7320508075688772}}, "df": 3, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {"forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.model_select": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 9}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1.4142135623730951}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.23606797749979}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 9}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.4142135623730951}}, "df": 15}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "q": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.23606797749979}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 2}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 1}}, "g": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 11, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 9}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 16}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2.23606797749979}}, "df": 8}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 6, "s": {"docs": {"forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.explore.test_stationarity": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 9, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.6457513110645907}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 4}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 3}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 3}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 4}}, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}}, "df": 5}}}}}, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 9, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 3}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 9}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}}, "df": 8, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}}, "df": 2}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.4142135623730951}}, "df": 11, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2.23606797749979}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 2.23606797749979}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_interval": {"tf": 2.23606797749979}}, "df": 15, "s": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.7320508075688772}}, "df": 12}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}}, "df": 3}, "o": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"forecast_combine.forecast.Forecast.__init__": {"tf": 1}}, "df": 1}, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}}, "df": 6}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 3.605551275463989}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 4.358898943540674}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 3.4641016151377544}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 3.605551275463989}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 3}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 29}, "f": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.6457513110645907}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 16}, "t": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}}, "df": 7, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 10}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 10, "s": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 12}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.23606797749979}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 7, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.23606797749979}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}}, "df": 8}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}}, "df": 4}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.6457513110645907}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 2.8284271247461903}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.7416573867739413}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 29, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}}, "df": 17, "d": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.3166247903554}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 36}, "y": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 2}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 3}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 3, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.449489742783178}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2}}, "df": 3}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}}, "df": 7, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 6}}}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 10}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.4641016151377544}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.6457513110645907}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 4}}}}}}}, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "x": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 2}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 2.23606797749979}}, "df": 15, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_interval": {"tf": 2}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 15, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 2}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 12}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.7320508075688772}}, "df": 12}}}, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 6}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.4142135623730951}}, "df": 2}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 2.23606797749979}}, "df": 1, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 4}}}, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}}, "df": 2, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}}, "df": 3}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 2}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "o": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}}, "df": 14, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 4.242640687119285}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 2}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 3.605551275463989}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 2}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2.23606797749979}, "forecast_combine.model_select": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 5.830951894845301}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 3.605551275463989}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_series": {"tf": 2.6457513110645907}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 50}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2.8284271247461903}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2.8284271247461903}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 3}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 3}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 23, "[": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2.449489742783178}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}}, "df": 2}}}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 14, "s": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}}, "df": 8}}}}}}, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.4641016151377544}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 13, "e": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1.7320508075688772}}, "df": 1}}, "r": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.7320508075688772}}, "df": 14, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastEval": {"tf": 2}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 3}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 2.23606797749979}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}}, "df": 17, "s": {"docs": {"forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 4}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1.4142135623730951}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 3}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 2.8284271247461903}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2.23606797749979}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2.23606797749979}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 35, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.test_stationarity": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.449489742783178}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 2}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 2}, "forecast_combine.utils.explore.test_stationarity": {"tf": 2}, "forecast_combine.utils.explore.decompose_series": {"tf": 2.23606797749979}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 2}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 2}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 2}, "forecast_combine.utils.explore.analyse_series": {"tf": 2.449489742783178}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 3.3166247903554}}, "df": 25}}}}, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.ForecastFit": {"tf": 1}}, "df": 2, "s": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "p": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}}, "df": 5, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}}, "df": 3}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}}, "df": 3}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 2.8284271247461903}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}}, "df": 12}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {"forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.7416573867739413}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 8}}}}, "k": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}}, "df": 3}, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 4}}}, "w": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 3.3166247903554}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 3.4641016151377544}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2.8284271247461903}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 2.23606797749979}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 14, "s": {"docs": {"forecast_combine.forecast": {"tf": 1}, "forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 2}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 16}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}}, "df": 7}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 7}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 3}}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 51}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1.4142135623730951}}, "df": 2}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2}}}, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 3.3166247903554}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 3}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 3.3166247903554}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 35}, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.ForecastEval": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 4}}}}}}}, "f": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}}, "df": 3, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"forecast_combine.utils.explore.test_stationarity": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval": {"tf": 2}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 2}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.872983346207417}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}}, "df": 20}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}}, "df": 2}}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 2.8284271247461903}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 2}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_interval": {"tf": 2}, "forecast_combine.utils.plotting.plot_windows": {"tf": 2.23606797749979}}, "df": 28, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 9}}}}, "s": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 3}}}, "t": {"docs": {"forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.7320508075688772}}, "df": 12}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.Forecast.__init__": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.__init__": {"tf": 1}}, "df": 12}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 2}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 36}}}, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 2}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {"forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}}, "df": 1}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 6, "d": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}}, "df": 2}, "s": {"docs": {"forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.7320508075688772}}, "df": 6}}}}, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}}, "df": 2, "s": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.4142135623730951}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 10}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 3}}}}}}, "v": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}}, "df": 4}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 2}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 8, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 3}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 11}}, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 3}, "k": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 3.4641016151377544}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 4, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 3}, "forecast_combine.forecast.Forecast.fit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 5.385164807134504}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 3.4641016151377544}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 3.605551275463989}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 19, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 5.0990195135927845}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 14}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}}, "df": 9, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 2}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}}, "df": 12}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 3.3166247903554}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 5, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 8}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.7320508075688772}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}}, "df": 3}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 3}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 5}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}}, "df": 5}}}, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 6, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}}, "df": 3}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}}, "df": 2}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.23606797749979}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}}, "df": 7}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 2}, "forecast_combine.utils.metrics.summary_perf": {"tf": 2}}, "df": 3, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.7320508075688772}}, "df": 7}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}}, "df": 5}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 12}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2.23606797749979}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.decompose_series": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 16, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 3.605551275463989}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit": {"tf": 2}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 3.4641016151377544}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 3}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 2}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 28}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"forecast_combine.utils.explore.plot_time_series": {"tf": 1}}, "df": 1, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.23606797749979}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 7}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.8284271247461903}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 3}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 3}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 2.449489742783178}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 28}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2.23606797749979}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}}, "df": 10}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 3}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.test_stationarity": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 4}, "o": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 1}}}}, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}}, "df": 3, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.6457513110645907}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.7320508075688772}}, "df": 9, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 14}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.8284271247461903}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot": {"tf": 4}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2.8284271247461903}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 2.449489742783178}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 26}}, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 6}, "d": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "w": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.7320508075688772}, "forecast_combine.forecast.Forecast.update": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 9, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 10}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}}, "df": 2}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 3}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.23606797749979}}, "df": 5}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "r": {"2": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 3}, "docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 2, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1.4142135623730951}}, "df": 7}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.utils.explore.decompose_series": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}}, "df": 7}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.reconcile": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 3.3166247903554}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.7320508075688772}}, "df": 1, "d": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 2.23606797749979}}, "df": 5}}}}}}}}, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 3, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 4, "s": {"docs": {"forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.evaluate": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_predictions": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.save": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.reconcile_preds": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.decompose_series": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 48}, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 2, ":": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}}, "df": 1}}}, "k": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFit.insample_perf": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot.plot_insample_performance": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 15}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 3}}, "w": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 3.872983346207417}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}}, "df": 19, "s": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 2.23606797749979}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.7320508075688772}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}}, "df": 2}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.reconcile": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 9, "d": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastFitPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}}, "df": 6}}}, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1.4142135623730951}}, "df": 6, "d": {"docs": {"forecast_combine.forecast.Forecast.update": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 3}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}}, "df": 5}}}}}}}}}}, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.split_procedure_summary": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.ForecastEval": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.23606797749979}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 2}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 6, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 7}}}, "n": {"docs": {}, "df": 0, "p": {"docs": {"forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1.4142135623730951}}, "df": 2}}}, "f": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}}, "df": 3, "f": {"docs": {"forecast_combine.forecast.ForecastFitPlot": {"tf": 1}}, "df": 1}, "e": {"docs": {"forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 2.449489742783178}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.plot_predict": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 14, "s": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1.4142135623730951}}, "df": 7}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyse_series": {"tf": 1.4142135623730951}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}}, "df": 1}}}}, "b": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2, "u": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.evaluate": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.7320508075688772}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 2}, "forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 12}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_interval": {"tf": 1}}, "df": 2}}}}}}}}}, "y": {"docs": {"forecast_combine.forecast.Forecast.fit": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 5}, "e": {"docs": {"forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 2.449489742783178}, "forecast_combine.model_select.ForecastModelSelect.add_forecaster": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1}}, "df": 10, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 4}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 2.6457513110645907}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2.8284271247461903}}, "df": 5}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.reconcile.ForecastReconciler.update": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 3.3166247903554}, "forecast_combine.model_select.ForecastModelSelect.select_best": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.summary_per_cutoff": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 2}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler.fit": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 9}}}}}, "y": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 2.23606797749979}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 2.449489742783178}, "forecast_combine.forecast.ForecastFit": {"tf": 1.4142135623730951}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1.7320508075688772}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.evaluate_metrics": {"tf": 1.4142135623730951}, "forecast_combine.utils.metrics.summary_perf": {"tf": 2}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}, "forecast_combine.utils.plotting.plot_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 19, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 12}}}}}, ":": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}}, "df": 3}}}}}}, "x": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 2.23606797749979}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.Forecast.update": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastFit": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.7320508075688772}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1.4142135623730951}, "forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1.4142135623730951}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 18, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"forecast_combine.forecast.ForecastPlot": {"tf": 2}, "forecast_combine.forecast.ForecastPlot.plot_train_test": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_cv_procedure": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction": {"tf": 1}, "forecast_combine.forecast.ForecastPlot.plot_prediction_true": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot": {"tf": 1}, "forecast_combine.forecast.ForecastEvalPlot.plot_oos_score": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.plot_model_compare": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_prediction": {"tf": 1}, "forecast_combine.utils.explore.plot_time_series": {"tf": 1}, "forecast_combine.utils.plotting.plot_windows": {"tf": 1}}, "df": 12}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.split_procedure_summary": {"tf": 1}, "forecast_combine.forecast.Forecast.predict": {"tf": 1}, "forecast_combine.forecast.ForecastEval": {"tf": 1.7320508075688772}, "forecast_combine.forecast.ForecastEval.summary_results": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_cutoff": {"tf": 1}, "forecast_combine.forecast.ForecastEval.summary_horizon": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1}}, "df": 8}}}}}}, "t": {"docs": {"forecast_combine.forecast.Forecast": {"tf": 1.4142135623730951}, "forecast_combine.forecast.Forecast.get_pred_errors": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.get_pred_errors": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.predict": {"tf": 1.4142135623730951}, "forecast_combine.model_select.ForecastModelSelect.update": {"tf": 1.4142135623730951}, "forecast_combine.utils.explore.plot_acf_pacf": {"tf": 1}, "forecast_combine.utils.explore.test_stationarity": {"tf": 1}, "forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyze_weekly_pattern": {"tf": 1}, "forecast_combine.utils.explore.analyse_series": {"tf": 1}, "forecast_combine.utils.metrics.summary_perf": {"tf": 1}, "forecast_combine.utils.metrics.calculate_prediction_interval": {"tf": 1}}, "df": 11}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"forecast_combine.utils.metrics.summary_perf": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"forecast_combine.utils.plotting.plot_series": {"tf": 3.4641016151377544}}, "df": 1}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1}, "forecast_combine.reconcile.ForecastReconciler": {"tf": 1}}, "df": 2}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"forecast_combine.model_select.ForecastModelSelect": {"tf": 1.4142135623730951}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.model_select.ForecastModelSelect.plot_train_test": {"tf": 1}, "forecast_combine.model_select.ForecastModelSelect.plot_cv_procedure": {"tf": 1}}, "df": 2}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"forecast_combine.reconcile.ForecastReconciler.predict": {"tf": 1}}, "df": 1}}}}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"forecast_combine.utils.explore.plot_yearly_seasonality": {"tf": 1}, "forecast_combine.utils.explore.analyze_monthly_pattern": {"tf": 1}}, "df": 2}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();